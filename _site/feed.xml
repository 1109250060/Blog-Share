<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SWUFE 奇点工作室学习博客交换站</title>
    <description>为切实提高工作室成员的学习积极性、涉猎宽度及思考的深度，从本学期开始，奇点工作室倡议每位成员每周至少完成一篇博客的写作及分享。涉及计算机基础理论、数学学习、数据分析、网站开发、网页设计、金融科技等等方面的学习经历和收获，也有相互之间的交流与讨论。当然，我们非常欢迎工作室之外的朋友们对我们的思考和学习笔记提出指正意见，也希望更多志同道合的朋友可以参与到我们这一次的尝试与努力中来，我们愿意相信，一个人走得快，一群人走得远，希望我们可以在柳湖旁一起建造一片GEEK之林！</description>
    <link>http://localhost:4000/huxblog-boilerplate/</link>
    <atom:link href="http://localhost:4000/huxblog-boilerplate/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 Mar 2019 01:59:39 +0800</pubDate>
    <lastBuildDate>Wed, 27 Mar 2019 01:59:39 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>一种pdf展示方案：FLexPaper</title>
        <description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;如果想要在网页中展示PDF，但是不希望他人下载或打印这些PDF，该如何实现呢？在网页中展示PDF有很多方案：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A、    首先&amp;lt; object &amp;gt;、&amp;lt; embed &amp;gt;、&amp;lt; iframe &amp;gt;这几个标签就能实现PDF文件的预览（无需JavaScript支持）&lt;/li&gt;
  &lt;li&gt;B、    我还在网上看了下发现挺多第三方js库可以实现PDF预览，如jQuery Document Viewer、jquery.media.js、PDFObject、PDF.js等等。我大概看了下PDFObject、PDF.js这两个库，前者并不是一个PDF的渲染工具，而是通过使用&amp;lt; embed &amp;gt;标签来显示PDF；后者则会解析PDF文件内容，还能将PDF渲染成Canvas。&lt;/li&gt;
  &lt;li&gt;C、    如道客巴巴一样，将pdf转成了flash显示。&lt;br /&gt;
其中，A类的做法展示的PDF渲染效果不佳，也无法调整PDF尺寸默认成自适应屏幕宽度，且必然可以打印PDF，但是可以禁用下载按钮；B类做法渲染效果可以，也能调整到自适应屏幕，可以禁用下载，通过js加挡板也可以实现禁止鼠标右键打印，但是仍然可以通过查看源代码的方法找到pdf地址进行下载；C类将PDF转成flash，效果不错，也能防止用户下载打印PDF，只是加载速度比不上第一种。
这里，就做一个C类做法的说明。
    &lt;h2 id=&quot;转换&quot;&gt;转换&lt;/h2&gt;
    &lt;p&gt;下载&lt;a href=&quot;http://www.swftools.org/download.html&quot;&gt;swftools工具包&lt;/a&gt;,点选exe文件下载而后安装：&lt;br /&gt;
 &lt;img src=&quot;/img/1903/03/th/1.png&quot; alt=&quot;1&quot; /&gt;&lt;br /&gt;
swftools工具包中的PDF2SWF工具可用来将PDF格式文件转换成SWF格式。使用下面的命令可以将pdf文件转换为单页swf文件。&lt;br /&gt;
　　pdf2swf.exe  pdfPath  –o swfPath  –T 9  –f。&lt;br /&gt;
　　pdf2swf为pdf2swf二进制命令的绝对路径；pdfpath为要进行转换的PDF文件的绝对路径；swfPath为转换后swf文件的路径；-T 9 用来设定转换的swf版本为9，这样设置是因为某些版本的swf文件并不能用flexpaper正常显示出来；-f在转换的文档每页中插入一帧，提高转换后文档的稳定性。&lt;br /&gt;
　　上述命令可直接在命令行中运行，实现pdf转换，如果想在Java中去进行pdf转换，做法如下： Java应用程序有一个Runtime类实例，使应用程序能够与其运行的环境相连接。应用程序不能创建自己的Runtime类实例，可以通过Runtime类的getRuntime方法获得当前运行时。获得Runtime类实例之后，即可以调用该类的exec方法创建一个新的进程来执行制定的字符串命令。因此，可以利用exec方法来调用之前所述的PDF2SWF命令来完成PDF至SWF文件的转换，代码如下：&lt;br /&gt;
&lt;img src=&quot;/img/1903/03/th/2.png&quot; alt=&quot;2&quot; /&gt;
　&lt;/p&gt;
    &lt;h2 id=&quot;pdf展示&quot;&gt;PDF展示&lt;/h2&gt;
    &lt;p&gt;FlexPaper是一个开源轻量级的文档浏览组件，被设计和比如PDF2SWF库（包含于SWFTools）一起工作，使得在网页上，Adobe Flex以及别的基于Flash的应用程序中显示和交互PDF文件成为可能。即，使得在没有安装PDF阅读器软件的情况下浏览PDF文件成为可能。FlexPaper项目同时提供了Flex库和独立的Flash版本。&lt;/p&gt;
    &lt;h3 id=&quot;下载flexpaper&quot;&gt;下载FlexPaper&lt;/h3&gt;
    &lt;p&gt;　　下载FlexPaper:FlexPaper在github上的项目地址为https://github.com/flexpaper/flexpaper。&lt;br /&gt;
下载后，我们只需要其中Example/flash中的js文件夹，复制到你的项目文件夹&lt;/p&gt;
    &lt;h3 id=&quot;flexpaper参数说明&quot;&gt;FlexPaper参数说明&lt;/h3&gt;
    &lt;p&gt;•    SwfFile(String)：需要使用FlexPaper打开的文档&lt;br /&gt;
•    Scale(Number)：初始化缩放比例，参数值应该是大于零的整数（1=100%）&lt;br /&gt;
•    ZoomTransition(String)：FlexPaper中缩放样式，它使用和Tweener一样的样式，默认参数值为easeOut，其他可选值包括：easenone，easeout，linear，easeoutquad&lt;br /&gt;
•    ZoomTime(Number)：从一个缩放比例变为另外一个缩放比例需要花费的时间，该参数值应该为0或更大&lt;br /&gt;
•    ZoomInterval(Number)：缩放比例之间间隔，默认值为0.1，该值应该为正数&lt;br /&gt;
•    FitPageOnLoad(Boolean)：初始化时自适应页面，与使用工具栏上的适应页面按钮同样的效果&lt;br /&gt;
•    FitWidthOnLoad(Boolean)：初始化时自适应页面宽度，与工具栏上的适应宽度按钮同样的效果&lt;br /&gt;
•    localeChain(String)：设置地区（语言），目前支持一下语言：&lt;br /&gt;
en_US (English)&lt;br /&gt;
fr_FR (French)&lt;br /&gt;
zh_CN (Chinese,Simple)&lt;br /&gt;
es_ES (Spanish)&lt;br /&gt;
pt_BR (Brazilian Portugese)&lt;br /&gt;
ru_RU (Russian)&lt;br /&gt;
fi_FN (FInnish)&lt;br /&gt;
de_DE (German)&lt;br /&gt;
nl_NL (Netherlands)&lt;br /&gt;
tr_TR (Turkish)&lt;br /&gt;
se_SE (Swedish)&lt;br /&gt;
pt_PT (Portugese)&lt;br /&gt;
el_EL (Greek)&lt;br /&gt;
da_DN (Danish)&lt;br /&gt;
cz_CS (Czech)&lt;br /&gt;
it_IT (Italian)&lt;br /&gt;
pl_PL (Polish)&lt;br /&gt;
pv_FN (Finish)&lt;br /&gt;
hu_HU (Hungarian)&lt;br /&gt;
•    FullScreenAsMaxWindow(Boolean)：当设置为true时，单击全拼按钮会打开一个FlexPaper最大化的新窗口而不是全屏，当由于flash播放器因为安全而禁止全屏，而使用flexpaper作为独立的flash播放器的时候设置为true是个优先选择&lt;br /&gt;
•    ProgressiveLoading(Boolean)：当设置为true时，展示文档时不会加载完整个文档，而是逐步加载，但是需要将文档中转化为9以上的版本（使用pdf2swf的时候使用-T 9标签）&lt;br /&gt;
•    MaxZoomSize(Number)：设置最大的缩放比例&lt;br /&gt;
•    MinZoomSize(Number)：设置最小的缩放比例&lt;br /&gt;
•    SearchMatchAll(Boolean)：设置为true时，单击搜索所有符合条件的地方高亮显示&lt;br /&gt;
•    InitViewMode(String)：设置启动模式如“Portrait”或“TowPage”&lt;br /&gt;
•    ViewModeToolsVisible(Boolean)：工具栏上是否显示样式选择框&lt;br /&gt;
•    ZoomToolsVisible(Boolean)：工具栏上时候显示缩放工具&lt;br /&gt;
•    NavToolsVisible(Boolean)：工具栏上是否显示导航工具&lt;br /&gt;
•    CursorToolsVisible(Boolean)：工具栏上是否显示光标工具&lt;br /&gt;
•    SearchToolsVisible(Boolean)：工具栏上是否显示搜索工具&lt;/p&gt;
    &lt;h3 id=&quot;flexpaper例子&quot;&gt;FlexPaper例子&lt;/h3&gt;
    &lt;p&gt;创建html页面test.html，代码如下：&lt;br /&gt;
&lt;img src=&quot;/img/1903/03/th/3.png&quot; alt=&quot;3&quot; /&gt;&lt;br /&gt;
test.html文件以及需要的js，swf文件组织结构如下图所示：&lt;br /&gt;
 &lt;img src=&quot;/img/1903/03/th/4.png&quot; alt=&quot;4&quot; /&gt;&lt;br /&gt;
test.html文件组织结构&lt;br /&gt;
　　显示1.swf文件的效果如下图所示：&lt;br /&gt;
&lt;img src=&quot;/img/1903/03/th/5.png&quot; alt=&quot;5&quot; /&gt;&lt;br /&gt;
FlexPaper下显示Paper.swf效果，可以看到显示效果不错，自动适应页面宽度，且不可打印，不可下载。&lt;/p&gt;
    &lt;h2 id=&quot;问题及解决&quot;&gt;问题及解决&lt;/h2&gt;
    &lt;h3 id=&quot;打印问题&quot;&gt;打印问题&lt;/h3&gt;
    &lt;p&gt;将参数中所有toolvisible选项都设置为false，还有PrintEnabled : false，这样久能避免用户打印。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;转换为flash时的乱码问题&quot;&gt;转换为flash时的乱码问题&lt;/h3&gt;
&lt;p&gt;pdf2swf默认没有多语言支持，直接执行有可能报如下错误：&lt;br /&gt;
Error: Unknown character collection ‘Adobe-GB1’
Error: Couldn’t find a font for ‘HeiseiMin-W3-90ms-RKSJ-H’
需要添加xpdf语言包进行支持，步骤如下：&lt;br /&gt;
1.下载语言包，http://www.foolabs.com/xpdf/download.html&lt;br /&gt;
2.以中文为例，解压至C:\App\xpdf\xpdf-chinese-simplified&lt;br /&gt;
修改C:\App\xpdf\xpdf-chinese-simplified\add-to-xpdfrc，将/usr/…的linux路径改为正确的windows路径&lt;br /&gt;
3.新建文件C:\App\xpdf\add-to-xpdfrc，内容为：&lt;br /&gt;
include C:\App\xpdf\xpdf-chinese-simplified\add-to-xpdfrc&lt;br /&gt;
include C:\App\xpdf\xpdf-japanese\add-to-xpdfrc&lt;br /&gt;
4.下载所需的字体，比如日语字体’HeiseiMin-W3-90ms-RKSJ-H’的kochi-mincho-subst.ttf，我在这里下载的。中文在这里。&lt;br /&gt;
5.修改C:\App\xpdf\xpdf-japanese\add-to-xpdfrc，增加一行displayCIDFontTT Adobe-Japan1 C:\App\xpdf\font\kochi-mincho-subst.ttf&lt;br /&gt;
6.测试&lt;br /&gt;
pdf2swf -P root -s languagedir=C:\App\xpdf  “C:\Users\Administrator\Desktop\swftools test\japanese.pdf” -o “C:\Users\Administrator\Desktop\swftools test\x.swf”&lt;br /&gt;
NOTICE  Adding C:\App\xpdf to language pack directories
NOTICE  processing PDF page 1 (842x595:0:0)
NOTICE  Writing SWF file C:\Users\Administrator\Desktop\swftools test\x.swf&lt;br /&gt;
没有错误了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;1 &lt;a href=&quot;http://www.bbtang.info/linux/805.html&quot;&gt;FlexPaper：使用flash在线展示pdf&lt;/a&gt;&lt;br /&gt;
2 &lt;a href=&quot;http://www.bbtang.info/linux/805.html&quot;&gt;解决Linux中swftools转换中文pdf时出现乱码问题&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/25/%E4%B8%80%E7%A7%8D%E7%BD%91%E9%A1%B5PDF%E5%B1%95%E7%A4%BA%E6%96%B9%E6%A1%88/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/25/%E4%B8%80%E7%A7%8D%E7%BD%91%E9%A1%B5PDF%E5%B1%95%E7%A4%BA%E6%96%B9%E6%A1%88/</guid>
        
        <category>pdf</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>Linux-CentOS7系统下安装python3并配置环境</title>
        <description>&lt;p&gt;首先，因为centos7以上的系统已经安装了python2，所以，如果直接安装python3的话，之后会出现一系列的问题，所以需要修改环境&lt;/p&gt;

&lt;p&gt;输入命令python -V查看环境:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -V&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;发现是python２.7.5，这个python版本已经不适合现在的开发了，但是centos系统的yum又是依赖python2.7.5的，所以需要解决这个问题&lt;/p&gt;

&lt;p&gt;在安装python3之前需要安装相关包，命令如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开始编译安装python3，去官网下载编译安装包，地址是：https://www.python.org/ftp/python/3.6.2/&lt;/p&gt;

&lt;p&gt;解压之后进入文件夹&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd Python-3.6.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开始编译安装：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure prefix=/usr/local/python3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完毕，添加软链：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /usr/local/python3/bin/python3 /usr/bin/python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后查看python版本：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -V&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看python2版本：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python2 -V&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后因为yum需要python2，所以还要修改：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /usr/bin/yum&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把文件开头的#! /usr/bin/python修改为#! /usr/bin/python2&lt;/p&gt;

&lt;p&gt;然后：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /usr/libexec/urlgrabber-ext-down&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;#! /usr/bin/python 也修改为#! /usr/bin/python2&lt;/p&gt;

&lt;p&gt;之后python3就算安装成功了&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/25/Linux-CentOS7%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85python3%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83_rail1000/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/25/Linux-CentOS7%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85python3%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83_rail1000/</guid>
        
        <category>python</category>
        
        <category>Linux</category>
        
        <category>后端</category>
        
        <category>服务器</category>
        
        
      </item>
    
      <item>
        <title>HTTP—&gt;HTTPS (SSL/TLS)</title>
        <description>&lt;p&gt;HTTP（HyperText Transfer Protocol）作为一种无状态的、简单快速的、基于 TCP的”可靠“传输协议。它是否足够安全呢？与HTTPS又有什么关系呢？&lt;/p&gt;

&lt;h2 id=&quot;http与https&quot;&gt;HTTP与HTTPS&lt;/h2&gt;

&lt;h3 id=&quot;1-什么是http&quot;&gt;1. 什么是HTTP？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;大部分网站都是通过 HTTP 协议来传输 Web 页面以及 Web 页面上包含的图片、CSS 样式、JS 脚本等信息的，HTTP协议可以说是万维网的数据通信的基础。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是，近几年，Google、Baidu、Facebook 等互联网巨头开始大力推行 HTTPS， 国内外的很多大型互联网公司很多也都已经启用了全站 HTTPS，这是为什么呢？&lt;/p&gt;

    &lt;p&gt;HTTP明文传输带来了很大的&lt;strong&gt;安全隐患&lt;/strong&gt;，主要有三大风险：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;窃听风险：第三方可以获知通信内容&lt;/p&gt;

      &lt;p&gt;篡改风险：第三方可以修改通信内容&lt;/p&gt;

      &lt;p&gt;冒充风险：第三方可以冒充他人身份参与通信&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;ps: 抓包可看到使用http传输的图片信息（第四行）：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;img src=&quot;/img/1903/03/iyiniyin/1553445596865.png&quot; alt=&quot;1553445596865&quot; /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;把他的图片给改了：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/1903/03/iyiniyin/1553452062737.png&quot; alt=&quot;1553452062737&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-给http加一把锁https&quot;&gt;2. 给HTTP加一把锁—&amp;gt;HTTPS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTTPS（HyperText Transfer Protocol over Secure Socket Layer) 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。(from wiki)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。&lt;/strong&gt;可以将它理解为HTTP+SSL/TLS， 即 HTTP 下加入 SSL/TLS 层。其层次结构及位置如图：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;img src=&quot;assets/03/03/iyiniyin/1553446309418.png&quot; alt=&quot;1553446309418&quot; /&gt;&lt;/p&gt;

      &lt;p&gt;(from 简书)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;针对HTTP的问题，它提供了以下&lt;strong&gt;解决方案&lt;/strong&gt;：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;所有信息都是加密传播，第三方无法窃听
具有校验机制，一旦被篡改，通信双方会立刻发现
配备身份证书，防止身份被冒充&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，SSL/TLS是如何承载HTTP，实现以上方案的呢？&lt;/p&gt;

&lt;h2 id=&quot;ssttls的工作&quot;&gt;SST/TLS的工作&lt;/h2&gt;

&lt;h3 id=&quot;1-工作机制简介&quot;&gt;1. 工作机制简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;传输层安全性协议（Transport Layer Security，TLS）及其前身安全套接层（Secure Sockets Layer，SSL）是一种安全协议。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;它指定了一种在应用程序协议（如Http、Telenet、NMTP和FTP等）和TCP/IP协议之间提供数据安全性分层的机制。&lt;/strong&gt; 示意图：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;img src=&quot;/img/1903/03/iyiniyin/1553446400295.png&quot; alt=&quot;1553446400295&quot; /&gt;&lt;/p&gt;

      &lt;p&gt;(from csdn)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-结构及功能&quot;&gt;2. 结构及功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;整体结构&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;TLS协议是由TLS记录协议和TLS握手协议这两层协议叠加而成的。&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;位于底层的TLS记录协议负责进行加密，而位于上层的TLS握手协议负责除了加密以外的其他各种操作，上层又可以分为4个子协议。如下图所示：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/1903/03/iyiniyin/1553447868551.png&quot; alt=&quot;1553447868551&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;(from wiki)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;具体功能&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;TLS握手协议&lt;/strong&gt;最重要的作用是&lt;strong&gt;进行身份认证与加密信息的协商&lt;/strong&gt;，4个子协议功能如下：&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;&lt;strong&gt;握手协议，是TLS握手协议的一部分（注意区分二者），负责在客户端和服务器之间协商决定密码算法和共享密钥。基于证书的认证操作也是在这个协议中完成。&lt;/strong&gt;&lt;/p&gt;

          &lt;p&gt;密码规格变更协议，负责向通信对象传达变更密码方式的信号。&lt;/p&gt;

          &lt;p&gt;警告协议，负责在发生错误时将错误传达给对方。&lt;/p&gt;

          &lt;p&gt;应用数据协议，负责将TLS上面承载的应用数据传达给通信对象。&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;p&gt;其中，著名的客户端与服务器&lt;strong&gt;握手过程&lt;/strong&gt;如下图所示（本图为个人理解的顺序和过程，其中，服务器必须认证客户端，但是客户端可以不要求服务器发送证书，如果要求，就是双向认证。ps:其实交换密钥的过程也是变相的身份认证了吧）：&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/img/1903/03/iyiniyin/1553448792562.png&quot; alt=&quot;1553448792562&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;简单来说，本过程结束后，客户机与服务器选择了双方都支持的密码算法，生成了共享密钥，完成了身份认证，从而可以建立加密TSL连接。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;TLS 记录协议&lt;/strong&gt;，位于TLS握手协议的下层，是用来封装上层协议数据的协议，负责使用协商好的加密算法及产生的共享密钥对消息进行加密通信。&lt;/p&gt;

        &lt;p&gt;所有的传输数据都被封装在记录中，该协议可完成以下工作：分组、组合；压缩、解压缩；消息认证；消息传输等。部分流程如下图所示：&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;其中添加的MAC是消息认证码，用于接收方验证消息是否真的是对方产生的。&lt;/p&gt;

          &lt;p&gt;&lt;img src=&quot;/img/1903/03/iyiniyin/1553449674281.png&quot; alt=&quot;1553449674281&quot; /&gt;&lt;/p&gt;

          &lt;p&gt;(from csdn)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TLS协议与应用层&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;TLS协议对于应用层来说是透明的，在编写基于TSL的HTTPS应用时，无论客户端还是服务端都不需要考虑SSL的存在。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-过程模拟输出示意&quot;&gt;3. 过程模拟输出示意&lt;/h3&gt;

&lt;p&gt;用open ssl库进行了基于TSL的socket通讯过程模拟，部分输出：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;assets/03/03/iyiniyin/1553451193044.png&quot; alt=&quot;1553451193044&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;assets/03/03/iyiniyin/1553451209002.png&quot; alt=&quot;1553451209002&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;assets/03/03/iyiniyin/1553451232281.png&quot; alt=&quot;1553451232281&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;assets/03/03/iyiniyin/1553451240335.png&quot; alt=&quot;1553451240335&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;补充与总结&quot;&gt;补充与总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP默认使用80端口，Https使用443端口。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于安全性&lt;/p&gt;

    &lt;p&gt;HTTPS相比HTTP会更加安全，但是由于需要额外加解密操作，效率没有那么高。在登录Https站点和Http站点时，可以明显感觉到性能差异。&lt;/p&gt;

    &lt;p&gt;但是HTTPS当然也不是绝对安全，在设计机制、实现、信任模型等方面都可以寻找漏洞进行攻击，比如前些年著名的open ssl心脏滴血漏洞。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以利用Wireshark等抓包工具验证一下握手等过程，还是挺有意思的，HTTP账号和密码完全没有加密，明文传送，可以很容易截获到账号和密码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TLS非常好地利用了密码技术，篇幅限制，握手的详细过程没有在此介绍，计科密码学的课程由于其过程偏繁琐也没有介绍，感兴趣的话可以进一步了解。&lt;/p&gt;

    &lt;p&gt;对于在TLS中使用的密码技术总结如下：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;公钥密码：加密预备主密码&lt;/li&gt;
        &lt;li&gt;单项散列函数：构成伪随机数生成器&lt;/li&gt;
        &lt;li&gt;伪随机数生成器：生成预备主密码；根据主密码生成密钥（密码参数）；生成初始化向量。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;对称密码（CBC模式）：确保片段的机密性&lt;/li&gt;
        &lt;li&gt;消息认证码：确保片段的完整性并进行认证&lt;/li&gt;
        &lt;li&gt;认证加密（AEAD）：确保片段的完整性和机密性并进行认证&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;知乎上有老哥对握手过程的理解…&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/03/03/iyiniyin/1553451931548.png&quot; alt=&quot;1553451931548&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/25/HTTP-HTTPS-(SSL&TLS)/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/25/HTTP-HTTPS-(SSL&TLS)/</guid>
        
        <category>网络</category>
        
        <category>HTTP</category>
        
        
      </item>
    
      <item>
        <title>Django项目上线部署全流程</title>
        <description>&lt;h1 id=&quot;django项目上线部署全流程&quot;&gt;Django项目上线部署全流程&lt;/h1&gt;

&lt;p&gt;Author：林柯秀&lt;/p&gt;

&lt;p&gt;Date：2019-03-24&lt;/p&gt;

&lt;p&gt;目前在Linux系统上部署Django项目有两种主流方案：Nginx+uWSGI+Django/Apache+uWSGI+Django，本文介绍的部署方案为：&lt;strong&gt;Nginx+uWSGI+Django&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及一个IMAP / POP3代理服务器。其作为服务器的最前端，负责接收浏览器的所有请求并统一管理，所有的静态请求都有Nginx自己处理；&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WSGI是一种Web服务器网关接口，是一个Web服务器（例如Nginx服务器）与Web应用（例如Django应用）通信的一种规范。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;uWSGI&lt;/strong&gt;是WSGI的一个实现，其通过uwsgi协议提供对Web服务器的响应。所有非静态请求通过uWSGI服务器传递给Django应用，由Django进行处理并响应；&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;开发环境：Windows操作系统&lt;/p&gt;

  &lt;p&gt;开发工具：Python 3.6+Django 2.0+MySQL+PyCharm&lt;/p&gt;

  &lt;p&gt;服务器操作系统：CentOS 7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;说明：实践中多使用虚拟环境，但本文并不涉及相关内容。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装项目相关组件&quot;&gt;安装项目相关组件&lt;/h2&gt;

&lt;p&gt;在安装相关组件前，首先需要安装Linux的wget工具用于从网上下载所需文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yum -y install wget&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;mysql的安装及配置&quot;&gt;MySQL的安装及配置&lt;/h3&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-linux&quot;&gt;# 安装mysql源包
wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm
# 安装源
yum localinstall mysql57-community-release-el7-8.noarch.rpm
yum install mysql-devel
# 安装mysql
yum install mysql-community-server
# 启动服务
systemctl start mysqld
# 设置为开机自启动
systemctl enable mysqld
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;设置密码&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt; grep 'temporary password' /var/log/mysqld.log
 mysql -u root -p
 set password for 'root'@'localhost'=password('密码'); ```
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置允许远程连接&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt; use mysql;
 update user set host = '%' where user = 'root';
 FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置数据库编码&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt; show variables like 'char%';
 set character_set_database=utf8;
 set character_set_server=utf8;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立Django项目所使用的数据库&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;python的安装及配置&quot;&gt;python的安装及配置&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;配置依赖包&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-linux&quot;&gt;# GCC编译器环境，安装Python所需的编译环境
yum -y install gcc
# Python3的依赖组件
yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite*-devel mysql-devel
# 使用wget工具下载Python 3.6的压缩包
wget &quot;https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz&quot;
# 对下载的压缩包进行解压
tar -zxvf Python-3.6.5.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;进入Python-3.6.5文件夹，将Python-3.6.5编译到CentOS 7系统&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 进入文件夹
cd Python-3.6.5
# 编译指令
sudo ./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;测试是否成功安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;安装Django项目所需的包&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;python批量安装或卸载包&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;显示已经安装的包名及其版本
  &lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;将已经安装的包名及其版本写入requirement.txt
  &lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze &amp;gt; requirement.txt&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;pip 批量安装包/库
  &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install -r requirement.txt&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;pip 批量卸载包/库
  &lt;code class=&quot;highlighter-rouge&quot;&gt;pip uninstall -r requirement.txt&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;上传django项目&quot;&gt;上传Django项目&lt;/h2&gt;

&lt;h3 id=&quot;将django项目改为项目上线模式&quot;&gt;将Django项目改为项目上线模式&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;修改settings.py文件；&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;关闭debug模式，Django不再提供静态资源服务，改由服务器来完成；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;将数据库配置信息的HOST修改为系统的ip地址；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;设置域名访问权限为所有。&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改settings.py中的静态资源指向路径；&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# 项目上线后指向的静态资源路径
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATIC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;static/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 设置Admin静态资源的保存路径
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'static'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将静态资源统一迁移到项目文件的static文件夹下；&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# 静态资源收集指令
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectstatic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改项目urls.py文件，设置静态资源的读取路径。&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...... ,
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^static/(?P&amp;lt;path&amp;gt;.*)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'document_root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATIC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'static'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;上传源码至服务器&quot;&gt;上传源码至服务器&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;可将项目文件压缩为.7z上传至服务器对应文件夹中（本文以/home文件夹为例）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装解.7z压缩格式的工具；&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yum -y install p7zip&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压项目文件。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;7za x filename.7z  &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部署uwsgi服务器&quot;&gt;部署uWSGI服务器&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装uwsgi；&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试服务器是否正常运行（首先要将使用的相应端口放在服务器安全组中）；&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; uwsgi --http  :8080 --chdir 项目绝对路径 -w 项目名称.wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;输入虚拟系统的IP地址+8080端口查看测试结构。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;成功后在项目目录下创建名为“项目名称_uwsgi.ini”的配置文件；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[uwsgi]
# Django-related settings
socket= :8080

# the base directory (full path)
chdir=/home/huanyu

# Django s wsgi file
module=huanyu.wsgi

# process-related settings
# master
master=true

# maximum number of worker processes
processes=4

# ... with appropriate permissions - may be needed
# chmod-socket       =664
# clear environment on exit
vacuum=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：配置属性socket将8080端口用于uWSGI和Nginx之间的通信，此时启动服务器无法看到项目首页。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;部署nginx&quot;&gt;部署Nginx&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装Nginx；&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 添加安装源
 rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
 # 使用yum安装
 yum install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start nginx&lt;/code&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入centos7系统的ip地址，可以看到欢迎页面（默认端口80）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置nginx.conf两种方法&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;法一&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;在项目目录中创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi_params&lt;/code&gt; 文件, 内容如下：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     uwsgi_param  QUERY_STRING       $query_string;
     uwsgi_param  REQUEST_METHOD     $request_method;
     uwsgi_param  CONTENT_TYPE       $content_type;
     uwsgi_param  CONTENT_LENGTH     $content_length;

     uwsgi_param  REQUEST_URI        $request_uri;
     uwsgi_param  PATH_INFO          $document_uri;
     uwsgi_param  DOCUMENT_ROOT      $document_root;
     uwsgi_param  SERVER_PROTOCOL    $server_protocol;
     uwsgi_param  REQUEST_SCHEME     $scheme;
     uwsgi_param  HTTPS              $https if_not_empty;

     uwsgi_param  REMOTE_ADDR        $remote_addr;
     uwsgi_param  REMOTE_PORT        $remote_port;
     uwsgi_param  SERVER_PORT        $server_port;
     uwsgi_param  SERVER_NAME        $server_name;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;在项目目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;项目名称_nginx.conf&lt;/code&gt;，并配置上述文件的路径:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 项目名称_nginx.conf

 # the upstream component nginx needs to connect to
 upstream django {
     # server unix:///path/to/your/mysite/mysite.sock; # for a file socket
     server 127.0.0.1:8080; # for a web port socket (we'll use this first)
 }

 # configuration of the server
 server {
     # the port your site will be served on
     listen      8001;
     # the domain name it will serve for
     server_name huanyu.org.cn; # substitute your machine's IP address or FQDN
     charset     utf-8;

     # max upload size
     client_max_body_size 75M;   # adjust to taste

     # Django media
     location /media  {
         alias /home/项目名称/media;  # your Django project's media files - amend as required
     }

     location /static {
         alias /home/项目名称/static; # your Django project's static files - amend as required
     }

     # Finally, send all non-media requests to the Django server.
     location / {
         uwsgi_pass  django;
         include     /home/项目名称/uwsgi_params; # the uwsgi_params file you installed
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;更新链接&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ln -s ~/home/项目名称/项目名称_nginx.conf /etc/nginx/conf.d/&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;strong&gt;法二&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;在CentOS7中进入&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/&lt;/code&gt; 编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; user  nginx;
 worker_processes  1;

 error_log  /var/log/nginx/error.log warn;
 pid        /var/run/nginx.pid;


 events {
     worker_connections  1024;
 }


 http {
     include       /etc/nginx/mime.types;
     default_type  application/octet-stream;

     log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                       '$status $body_bytes_sent &quot;$http_referer&quot; '
                       '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

     access_log  /var/log/nginx/access.log  main;

     sendfile        on;
     #tcp_nopush     on;

     keepalive_timeout  65;

     #gzip  on;

     include /etc/nginx/conf.d/*.conf;



     # 新增内容
     server{
     listen         8001;  #端口
     server_name    域名
     charset UTF-8;
     access_log     /var/log/nginx/myweb_access.log;
     error_log      /var/log/nginx/myweb_error.log;

     client_max_body_size   75M;
     location / {
     	include  uwsgi_params;
     	uwsgi_pass  39.98.68.154:8080;
     	uwsgi_read_timeout  120s;
     	uwsgi_send_timeout  120s;
     }
     location /static {
     	expires 30d;
     	autoindex on;
     	add_header Cache-Control private;
     	alias /home/项目名称/static/;
     }
     location /media  {
         autoindex on;
         alias /home/项目名称/media;  # your Django project's media files - amend as required
     }
 }
     #新增内容

 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;启动django项目&quot;&gt;启动Django项目&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;结束Nginx进程或者重启系统，确保当前系统没有运行Nginx服务器；&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 输入检测命令
 nginx -t -c /etc/nginx/nginx.conf
 # 若成功运行，运行以下命令重启
 nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;再次开启Nginx重新启动；&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx -c /etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start nginx&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目目录中运行&lt;code class=&quot;highlighter-rouge&quot;&gt;项目名称_uwsgi.ini&lt;/code&gt;；&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi  --ini 项目名称_uwsgi.ini&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;域名+8001&lt;/code&gt; 查看首页信息；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意：输入域名后使用的默认端口为80，此时被Nginx的默认欢迎页占用，在实践中需将Nginx欢迎页使用的端口修改为其他不常用端口，将Nginx配置端口设置为80。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资源&quot;&gt;参考资源&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;Setting up Django and your web server with uWSGI and nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/howto/static-files/&quot;&gt;Managing static files&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 24 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/24/Django%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%85%A8%E6%B5%81%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/24/Django%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%85%A8%E6%B5%81%E7%A8%8B/</guid>
        
        <category>python</category>
        
        <category>Django</category>
        
        <category>后端</category>
        
        <category>服务器</category>
        
        
      </item>
    
      <item>
        <title>鼠标的 hover 事件</title>
        <description>&lt;p&gt;在上一周的二级页面图纸中，设计提出了一个新功能：标题长度固定，但是指针靠近可以查看完整标题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/1903/03/YanYijun/1.JPG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;鼠标的hover事件&quot;&gt;鼠标的hover事件&lt;/h2&gt;

&lt;p&gt;定义和用法：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;定义：hover() 方法规定当鼠标指针悬停在被选元素上时要运行的两个函数。 方法触发 mouseenter 和 mouseleave 事件。
   注意: 如果只指定一个函数，则 mouseenter 和 mouseleave 都执行它。&lt;/li&gt;
    &lt;li&gt;语法：
   $(selector).hover(inFunction,outFunction)&lt;/li&gt;
    &lt;li&gt;调用:
   $( selector ).hover( handlerIn, handlerOut )&lt;/li&gt;
    &lt;li&gt;等同以下方式：
  $( selector ).mouseover( handlerIn ).mouseout( handlerOut );
  注意：如果只规定了一个函数，则它将会在 mouseover 和 mouseout 事件上运行。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;——来自菜鸟教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;实现&quot;&gt;实现：&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;把完整标题文字渲染到标签的属性里；然后鼠标移过去的时候，把属性拿到，创建一个div元素，把文字显示出来。
显示的时候根据鼠标的坐标定位div位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jquery代码&quot;&gt;jQuery代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-+jquery&quot;&gt;&amp;lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.slim.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
	$(function () {
		$('.h4').hover(function(e){
      // 鼠标进入标题h4
      var title = $(this).attr('data-title');   //获取完整title
      $('body').append('&amp;lt;div id=&quot;mytitle&quot;&amp;gt;'+ title +'&amp;lt;/div&amp;gt;');  // 在页面上创建一下div元素，内容为完整title
      var pleft = e.originalEvent.x;  //获取鼠标x坐标
      var ptop = e.originalEvent.y;  // y坐标
      $('#mytitle').css({position: 'absolute', left: pleft + 5, top: ptop + 5})
    }, function () {
      // 鼠标移出标题2
      // 删除创建的div元素
      $('#mytitle').remove();
     })
   })
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;html代码&quot;&gt;HTML代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-+html&quot;&gt;&amp;lt;h4 class=&quot;h4&quot; data-title=&quot;从C++开始认识那些你不知道的关系&quot;
style=&quot;color:#fbfcfc;&quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;+C++&amp;lt;/h4&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;css代码&quot;&gt;CSS代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-+css&quot;&gt;#mytitle{
    border: none;
    padding: 5px;
    box-shadow:  5px 5px 15px rgba(218,218,218,.5);
    background-color:#040409;
    color:#c17234;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;实现结果&quot;&gt;实现结果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/1903/03/YanYijun/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;1、最初看到这个功能时先尝试了onfocus,但实现效果不佳；&lt;/p&gt;

&lt;p&gt;2、hover事件需要获取鼠标定位；&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.runoob.com/&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 24 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/24/%E9%BC%A0%E6%A0%87%E7%9A%84hover%E4%BA%8B%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/24/%E9%BC%A0%E6%A0%87%E7%9A%84hover%E4%BA%8B%E4%BB%B6/</guid>
        
        <category>前端</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>Apache 配置 https 访问及跳转</title>
        <description>&lt;p&gt;这星期为Apache服务器安装了https，过程和以前用Tomcat的有很大差别。记笔记总结一下。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;操作系统：CentOS 7.4&lt;/li&gt;
  &lt;li&gt;Apache：2.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;获取证书&quot;&gt;获取证书&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;开启 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; 服务；&lt;/li&gt;
  &lt;li&gt;为域名申请SSL证书。成功后，下载证书文件和私钥文件。&lt;br /&gt;
其中，Apache文件夹内应有3个文件：&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;1_root_bundle.crt&lt;br /&gt;
2_www.domain.com.crt&lt;br /&gt;
3_www.domain.com.key&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;证书安装&quot;&gt;证书安装&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;将上述三个文件放在服务器的Apache/conf路径下，（可以专门创建一个文件夹，但确保在下面的配置步骤中可以找到证书文件的路径）。&lt;/li&gt;
  &lt;li&gt;编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;Apache/conf&lt;/code&gt; 下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;httpd.conf&lt;/code&gt; 文件，取消以下代码的前的注释符号：&lt;br /&gt;
```&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;LoadModule ssl_module modules/mod_ssl.so
 LoadModule socache_dbm_module modules/mod_socache_dbm.so
 LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
 Include conf/extra/httpd-ssl.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3. 编辑 `Apache/conf/extra/` 下的文件 `httpd-ssl.conf`  
确保以下选项前的注释已被取消：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSLCipherSuite HIGH:MEDIUM:!SSLv3:!####
SSLProxyCipherSuite HIGH:MEDIUM:!SSLv3:!####
SSLHonorCipherOrder on
SSLProtocol all -SSLv3
SSLProxyProtocol all -SSLv3
SSLPassPhraseDialog  builtin
SSLSessionCache        “shmcb:/usr/local/apache24//logs/ssl_scache(512000)”
SSLSessionCacheTimeout  300&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4. 修改 `&amp;lt;VirtualHost _default_:443&amp;gt;` 标签内的内容
- 将 `DocumentRoot` 改为你的项目地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DocumentRoot &quot;/your/location/&quot; ``` - 将 `SSLEngine` 设置为 `on` ```
SSLEngine on ``` - 将你的域名信息与证书地址设置在相应选项下 ```

ServerName www.domain.com

SSLCertificateChainFile /usr/local/apache/conf/1_root_bundle.crt
SSLCertificateFile /usr/local/apache/conf/2_www.domain.com_cert.crt
SSLCertificateKeyFile /usr/local/apache/conf/3_www.domain.com.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5. 此时可以分别访问`80`端口与`443`端口，如果`80`成功而`443`失败，则大多是 `httpd-ssl.conf` 的配置有误，可以输入如下命令调 `error_log` ，根据报错情况返回检查。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;tail -f apache/logs/error_log&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 配置重定向
1. 编辑 `Apache/conf` 下的 `httpd.conf` 文件，取消以下代码的前的注释符号：  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;LoadModule rewrite_module modules/mod_rewrite.so&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2. 编辑 `Apache/conf` 下的 `httpd.conf` 文件，在 `&amp;lt;VirtualHost *:80&amp;gt;`标签下添加以下代码：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RewriteEngine on
RewriteCond %{SERVER_PORT} !^443$
RewriteRule ^(.*)?$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]&lt;/p&gt;

&lt;p&gt;```
这样，&lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; 端口的所有项目就都会转发到 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; 。&lt;br /&gt;
如有不想跳转到 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; 的情况，需要写 &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; 文件。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/document/product/267/20381&quot;&gt;域名管理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/document/product/267/32826&quot;&gt;HTTPS配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/document/product/400/4143&quot;&gt;证书安装&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 24 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/24/Apache%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE%E5%8F%8A%E8%B7%B3%E8%BD%AC/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/24/Apache%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE%E5%8F%8A%E8%B7%B3%E8%BD%AC/</guid>
        
        <category>Apache</category>
        
        <category>https</category>
        
        <category>后端</category>
        
        <category>服务器</category>
        
        
      </item>
    
      <item>
        <title>Anaconda 常用conda命令</title>
        <description>&lt;p&gt;现阶段我们在学习python时，一般都会被优先推荐使用Anaconda，因为它的环境配置和包的安装快捷简单。&lt;/p&gt;

&lt;h2 id=&quot;什么是anaconda&quot;&gt;什么是Anaconda&lt;/h2&gt;
&lt;p&gt;首先，我们来认识一下Anaconda：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。它的包管理比较简单方便.管理虚拟环境也很方便好用。不过也正是因为包含了大量的科学包，所以Anaconda 的下载文件比较大（这并不是什么大问题）。&lt;/p&gt;

  &lt;p&gt;https://conda.io/docs/user-guide/tasks/index.html 这是官方的帮助文件，是英文版，很全面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们主要介绍一下部分常用conda命令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;conda管理：&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;查看conda版本：conda –version 或者 conda –V&lt;/li&gt;
    &lt;li&gt;查看更多信息：conda info&lt;/li&gt;
    &lt;li&gt;更新conda：conda update conda&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;包管理：&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;搜索包：conda search numpy （在所有添加的仓库以及默认仓库中搜索包 numpy）&lt;/li&gt;
    &lt;li&gt;安装包：
      &lt;blockquote&gt;
        &lt;p&gt;conda install scipy （向当前环境安装包 scipy）&lt;br /&gt;
conda install scipy=0.15.0 （向当前环境安装包 scipy 并指定版本）&lt;br /&gt;
conda install scipy curl （向当前环境安装多个包,并指定包版本）&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
    &lt;li&gt;查看所有已安装包：conda list&lt;/li&gt;
    &lt;li&gt;装非conda包/conda中使用pip：
      &lt;blockquote&gt;
        &lt;p&gt;conda install pip （可以使用如下命令安装pip到当前虚拟环境）&lt;br /&gt;
pip install numpy （使用pip安装numpy）&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
    &lt;li&gt;更新：
      &lt;blockquote&gt;
        &lt;p&gt;conda update unmpy （更新指定包）&lt;br /&gt;
conda update （更新所有包） &lt;br /&gt;
conda update python （更新python）&lt;br /&gt;
conda update conda （更新conda本身）&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
    &lt;li&gt;删除包：
      &lt;blockquote&gt;
        &lt;p&gt;conda remove scipy （删除当前环境中的scipy包）&lt;br /&gt;
conda remove scipy curl （删除当前环境中的多个包）&lt;br /&gt;
conda remove -n myenv scipy （删除指定环境中的指定包）&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;在任意文件夹中运行-jupyter-notebook&quot;&gt;在任意文件夹中运行 Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Jupyter notebook 也是Anaconda 中很好用的一部分，但在使用时，它会默认打开C盘user目录下的文件夹作为home路径，下面再介绍如何使用conda命令在任意文件夹中打开jupyter notebook：（以进入D盘boring文件夹为例）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;打开Anaconda prompt窗口&lt;/li&gt;
  &lt;li&gt;输入cd.. (回车)&lt;/li&gt;
  &lt;li&gt;再输入d: (回车)&lt;/li&gt;
  &lt;li&gt;再输入cd boring(回车)&lt;/li&gt;
  &lt;li&gt;再输入：jupyter notebook(回车)&lt;br /&gt;
会用默认浏览器进入jupyter notebook首页
或者可以复制窗口中提示的网址到任意浏览器中打开。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;conda管理&lt;/li&gt;
  &lt;li&gt;包管理&lt;/li&gt;
  &lt;li&gt;在任意文件夹中运行 Jupyter notebook&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://baike.baidu.com/item/anaconda/20407441?fr=aladdin&quot;&gt;anaconda （开源的Python包管理器）- 百度百科&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/tuzixini/article/details/81560980&quot;&gt;Anaconda - conda 常用命令 - tuzixini&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 24 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/24/Anaconda-%E5%B8%B8%E7%94%A8%E7%9A%84conda%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/24/Anaconda-%E5%B8%B8%E7%94%A8%E7%9A%84conda%E5%91%BD%E4%BB%A4/</guid>
        
        <category>python</category>
        
        <category>Anaconda</category>
        
        
      </item>
    
      <item>
        <title>网页设计两点注意</title>
        <description>&lt;p&gt;加入奇点以前，我一直认为网站的美观度和新颖是网页设计中最重要的点，后来，在第一次一级页面的设计中，我仔细观察了各大网站的官网设计，有了以下几点发现。&lt;/p&gt;

&lt;p&gt;一、网页设计应优先考虑用户体验&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;现在网络发展已到达一定高度，网站数量极多，人们对网站的美观要求也越来越高，部分网站为了凸显个性，将页面设计得极为复杂，或是过度简单，不可否认该页面具有较高的艺术审美，但这种不恰当的设计却严重影响了用户体验，降低了网站可读性，提高了阅读门槛，网站开发的目的是为了传递信息，如果连基础的信息传递都做不到，谈何设计呢？因此，创新重要，实用也同样重要，且只有大众喜欢的创新才是真正的创新。那些稀奇古怪看起来不错的字体、图片，往往会影响用户的点击和阅读体验。  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;二、尽量减少纯图片的直接引用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;首先，根据网站的优化原则，在保证功能性的前提下，越简单的设计越好，整张图片的引用固然美观大方，却对网站稳定性有负面影响，另一方面也增长了网站的初始加载时间。  


其次，直接引用图片，对图片本身清晰度要求较高，这类高清图较难从网上直接获取，大多需要美工额外设计制作，或是单独设计，会加重工作人员的负担，且在dpi通常较高的情况下，一张图片的大小是惊人的，过长的加载时间会影响信息的传递和用户的体验。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/23/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E4%B8%A4%E7%82%B9%E6%B3%A8%E6%84%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/23/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E4%B8%A4%E7%82%B9%E6%B3%A8%E6%84%8F/</guid>
        
        <category>设计</category>
        
        
      </item>
    
      <item>
        <title>当我们说起 MVC 时，我们在谈什么</title>
        <description>&lt;p&gt;我们都知道，MVC 对应着三个名词：模型（Model）、视图（View）和控制器（Controller）。但是，在我们每次遇到 MVC 这个专有名词的时候，我们说的是同一个东西吗？&lt;/p&gt;

&lt;h2 id=&quot;什么是-mvc&quot;&gt;什么是 MVC&lt;/h2&gt;

&lt;p&gt;我们先来看看维基百科关于 MVC 的定义吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;模型（Model）：用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。“ Model ”有对数据直接访问的权力，例如对数据库的访问。“Model”不依赖“View”和“Controller”，也就是说， Model 不关心它会被如何显示或是如何被操作。但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此 Model 的 View 必须事先在此 Model 上注册，从而，View 可以了解在数据 Model 上发生的改变。（比如：观察者模式（软件设计模式））&lt;/li&gt;
    &lt;li&gt;视图（View）：能够实现数据有目的的显示（理论上，这不是必需的）。在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。&lt;/li&gt;
    &lt;li&gt;控制器（Controller）：起到不同层面间的组织作用，用于控制应用程序的流程。它处理事件并作出响应。“事件”包括用户的行为和数据 Model 上的改变。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;——来自维基百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个定义似乎跟我们平常所接触的 MVC 不同，最大的区别来自于这一句：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此 Model 的 View 必须事先在此 Model 上注册&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在我们平常接触到的 MVC 中，Model 与 View 之间似乎并没有直接的互动，数据的更新一般是通过 Controller 来完成的。Controller 接收用户的请求与参数，并与 Model 交换数据，再把最新的结果交还给 View。而 View 的作用只是为用户展示页面，并把用户操作转交给 Controller 处理而已。在 MVC 的定义中，Model 和 View 却需要进行直接交互。&lt;/p&gt;

&lt;h2 id=&quot;那常见的那个-mvc-是什么&quot;&gt;那常见的那个 MVC 是什么？&lt;/h2&gt;

&lt;p&gt;其实我们常用的 MVC 并不是真正的 MVC，而是 Sun Microsystems 在 1998 年发布的 Model 2，全称为”JSP Model 2 Architecture”，也可以被称作”MVC Model 2”。由于 Model 2 没有中文维基百科页面，我们只能看看英文定义了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a Model 2 application, requests from the client browser are passed to the controller. The controller performs any logic necessary to obtain the correct content for display. It then places the content in the request (commonly in the form of a JavaBean or POJO) and decides which view it will pass the request to. The view then renders the content passed by the controller.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这段话的大概意思是：使用 Model 2 的应用中，用户经由浏览器发送的请求会被转发给 Controller， Controller 进行必要的程序后，把内容提供给 View，由 View 来渲染页面。&lt;/p&gt;

&lt;p&gt;这就跟我们所熟知那个”MVC”了。&lt;/p&gt;

&lt;h2 id=&quot;细分-mvc-model-2-的各部分功能&quot;&gt;细分 MVC Model 2 的各部分功能&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;View：主要负责显示。不具有行为，只是等待 Controller 提供内容来渲染。&lt;/li&gt;
  &lt;li&gt;Model：主要负责数据与模型。接收 Controller 发送的请求与参数，回传结果，必要时与数据库交换数据。&lt;/li&gt;
  &lt;li&gt;Controller：主要负责交互与业务。接收请求与参数，转发给 Model，并把回传结果提供给 View 渲染。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前端与后端提到的-mvc-是一样的吗&quot;&gt;前端与后端提到的 MVC 是一样的吗？&lt;/h2&gt;

&lt;p&gt;随着前端的不断发展，代码的糟糕组织方式逐渐被淘汰，取而代之的是各种框架，比如：Vue.js，Angular 和 React 等。他们无一例外的都采用了 MVC 模式来组织代码，以获得清晰的代码结构和良好的开发体验。那么前后端的 MVC 是一样的吗？&lt;/p&gt;

&lt;p&gt;前端 MVC 是建立在前后端分离的基础上的。随着互联网时代的发展，用户体验越来越受到重视，与用户面对面的前端就显得尤为重要，前端代码也就越来越复杂。&lt;/p&gt;

&lt;p&gt;于是前端也逐渐采用了 MVC 的开发模式，通过 API 与后端交互。以一图展示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/1903/03/Hivol/image-20190322165741902.png&quot; alt=&quot;image-20190322165741902&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前端接管了后端的 View 层，并在此基础上采用了 MVC 的开发模式。在前端中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model：保存每个页面中单独的数据，主要是 json 格式。&lt;/li&gt;
  &lt;li&gt;View：模版引擎或模版片段，也就是 HTML 代码。&lt;/li&gt;
  &lt;li&gt;Controller：也被称作 VM，是 Model 层和 View 层的调度者。也会负责 HTTP 请求交互和一些业务逻辑。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;我们经常提到的 MVC 其实是 MVC Model 2。&lt;/li&gt;
  &lt;li&gt;前端的 MVC 属于后端的 MVC 中的 View 层。&lt;/li&gt;
  &lt;li&gt;无论前端后端，将代码用 MVC 的形式组织起来都利于开发、维护和协作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/MVC&quot;&gt;MVC - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/MVVM&quot;&gt;MVVM - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/JSP_model_2_architecture&quot;&gt;JSP model 2 architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 23 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huxblog-boilerplate/2019/03/23/%E5%BD%93%E6%88%91%E4%BB%AC%E8%AF%B4%E8%B5%B7-MVC-%E6%97%B6-%E6%88%91%E4%BB%AC%E5%9C%A8%E8%B0%88%E4%BB%80%E4%B9%88/</link>
        <guid isPermaLink="true">http://localhost:4000/huxblog-boilerplate/2019/03/23/%E5%BD%93%E6%88%91%E4%BB%AC%E8%AF%B4%E8%B5%B7-MVC-%E6%97%B6-%E6%88%91%E4%BB%AC%E5%9C%A8%E8%B0%88%E4%BB%80%E4%B9%88/</guid>
        
        <category>前端</category>
        
        <category>MVC</category>
        
        <category>架构</category>
        
        
      </item>
    
  </channel>
</rss>
